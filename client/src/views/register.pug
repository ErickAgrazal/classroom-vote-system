extends includes/base

block content
    .col-8.mt-5.offset-2
        .row
            .col-md-12.text-center
                h1 Registrate
        .row.pt-5
            form.col-8.offset-2
                h5 Descripción:
                p Este es un formulario para el registro de los potenciales votantes.
                hr
                .form-group
                    label(for='cedula') 
                        strong 
                            | Introduzca su Cédula:
                    input#cedula.form-control(type="text", name="cedula")
                .form-check
                    input.btn.btn-primary.js-btn-register.float-right(type="button", value="Enviar")


block extra_js
    script.
        (function(){
            var App = {
                init: async function(){
                    App.bindEvents();
                },
                config: {
                    account: undefined,
                    web3: undefined,
                    contractAddress: '0xa3a14bDb6fe088EAc1cbf1CEebD161295fbA3C81'
                },
                controls: {
                    swalOptions: {
                        registerSwal: {
                            title: 'Proceso de Registro',
                            text: '¿Está seguro que desea registrarse?',
                            type: 'warning',
                            confirmButtonText: 'Registrarme'
                        }
                    }
                },
                htmlElements: {
                    btnRegister: $('.js-btn-register'),
                },
                bindEvents: function(){
                    App.associateWeb3Provider();
                    App.htmlElements.btnRegister.on('click', App.eventListeners.onBtnRegisterClick);
                },
                associateWeb3Provider: async function(){
                    // Load WEB3
                    if(typeof web3 !== 'undefined') {
                        // Check wether it's already injected by something 
                        // else (like Metamask or Parity Chrome plugin)
                        web3 = new Web3(web3.currentProvider);
                    } else {
                        // Or connect to a node
                        web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
                    }

                    // Check the connection
                    if(!await web3.eth.net.isListening()) {
                        console.error("Not connected");
                    }
                    App.config.web3 = web3;
                    App.loadAccounts();
                },
                eventListeners: {
                    onBtnRegisterClick: function(e){
                        Swal.fire(App.controls.swalOptions.registerSwal)
                            .then( (result) => {
                                if (result.value) App.requests.sendUserToContract();
                            });   
                    }
                },
                requests: {
                    sendUserToContract: async function(){
                        // Reload account in case something changed
                        App.loadAccounts();

                        // Continue
                        const contractJSON = await App.requests.fetchContract();
                        const { abi } = contractJSON;
                        const votingContract = new App.config.web3.eth.Contract(abi, App.config.contractAddress);
                        const id = App.config.web3.utils.utf8ToHex($('#cedula').val());
                        alert(App.config.account);
                        const resp = await votingContract.methods.associateUserToAddress(id).send({from: App.config.account});
                        console.log(resp);
                        // TODO SEND DATA TO CONTRACT
                    },
                    fetchContract: async function(){
                        return $.ajax({
                            url: 'api/contract',
                            method: 'POST'
                        });
                    }
                },
                loadAccounts: function(){
                    console.log(App.config.web3.eth.accounts);
                    console.log(App.config.web3.eth.accounts[0]);
                    App.config.account = App.config.web3.eth.accounts[0];
                }
            };
            App.init();
        })();