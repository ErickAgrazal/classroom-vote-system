extends includes/base

block content
    .col-8.mt-5.offset-2
        .row
            .col-12.text-center
                h1 Votar
        .row
            form
                .form-group
                    label(for='cedula') Ingrese su Cedula
                    input#cedula(type="text", name="cedula")
            table.table
                thead.thead-dark
                    tr                     
                        th(scope='col') Nombre del Candidato
                        th(scope='col') Votar
                tbody

block extra_js
    script.
        (function(){
            var App = {
                init: async function(){
                    await App.bindEvents();
                    await App.buildCandidateTable();
                },
                buildCandidateTable: async function(){
                    let candidates, index;
                    try{
                        candidates = await App.requests.fetchCandidatesFromContract();
                    }
                    catch(e){
                        console.log(e);
                    }
                    for(index = 0; index < candidates[0].length; index++ ){
                        let candidateName = App.config.web3.utils.hexToUtf8(candidates[1][index]);
                        let candidateId = candidates[0][index];
                        $('.table > tbody').append(
                                                    `<tr data-id='${candidateId}'>
                                                        <td>${candidateName}</td> 
                                                        <td>
                                                            <input class='btn btn-success js-btn-vote' type='button' value='Votar'>
                                                        </td>
                                                    </tr>`);
                    }
                    $('.js-btn-vote').on('click', App.eventListeners.onBtnVoteClick);
                },
                config: {
                    account: undefined,
                    web3: undefined,
                    contractAddress: '0x35A9C000Ab334914CC4dc5e2ecF2B781482E1E74'
                },
                controls: {
                    swalOptions: {
                        voteSwal: {
                            title: 'Proceso de Votación',
                            text: '¿Está seguro que desea votar por este candidato?',
                            type: 'warning',
                            confirmButtonText: 'Votar',
                        }
                    }
                },
                htmlElements: {
                    candidateTable: $('.table'),
                    btnVote: $('.js-btn-vote'),
                },
                bindEvents: async function(){
                    await App.associateWeb3Provider();
                },
                associateWeb3Provider: async function(){
                    // Load WEB3
                    let accounts = undefined;
                    if (window.ethereum) { // for modern DApps browser
                        web3 = new Web3(ethereum);
                        try {
                            await ethereum.enable();
                        } catch (error) {
                            console.error(error);
                        }
                    } else if (web3) { // for old DApps browser
                        web3 = new Web3(web3.currentProvider);
                    } else {
                        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
                    }

                    if(web3!== 'undefined'){
                        accounts = await web3.eth.getAccounts();
                    }

                    App.config.web3 = web3;
                    App.config.account = accounts[0];
                },
                eventListeners: {
                    onBtnVoteClick: function(e){
                        Swal.fire(App.controls.swalOptions.voteSwal)
                            .then( (result) => {
                                if (result.value) App.requests.sendVote($(this).closest('tr').data('id'));
                            });   
                    }
                },
                requests: {
                    sendVote: async function(candidateId){
                        // Reload account
                        App.associateWeb3Provider();

                        // Continue
                        const contractJSON = await App.requests.fetchContract();
                        const { abi } = contractJSON;
                        const votingContract = new App.config.web3.eth.Contract(abi, App.config.contractAddress);
                        const voterId = App.config.web3.utils.utf8ToHex($('#cedula').val());
                        const candidateIdInHex = App.config.web3.utils.utf8ToHex(candidateId);
                        const resp = await votingContract.methods.vote(candidateIdInHex, voterId).send({from: App.config.account});
                    },
                    fetchCandidatesFromContract: async function(){
                         // Reload account
                        App.associateWeb3Provider();

                        // Continue
                        const contractJSON = await App.requests.fetchContract();
                        const { abi } = contractJSON;
                        const votingContract = new App.config.web3.eth.Contract(abi, App.config.contractAddress);
                        return votingContract.methods.getCandidates().call({from: App.config.account});
                    },
                    fetchContract: async function(){
                        return $.ajax({
                            url: 'api/contract',
                            method: 'POST'
                        });
                    }
                },
            };
            App.init();
        })();